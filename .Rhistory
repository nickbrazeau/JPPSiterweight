# get model residuals
res <- fit_jpps(x = ind.obs, y = dep.obs, par = oldcof)
B
par.init.all
names(par.init.all)
oldcof
mod.new$par
# store old model coefficients
oldcof <- mod.new$par
oldcof
# get model residuals
res <- fit_jpps(x = ind.obs, y = dep.obs, par = oldcof)
res
undebug(fit_jpps)
library(JPPSiterweight)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = F,
message = F
)
library(tidyverse)
library(cowplot)
# TODO usethis::use_data
#
dat <- readxl::read_excel(path = "~/Downloads/average body area and length_kanyawara 2012.xlsx", sheet = 1) %>%
magrittr::set_colnames(tolower(colnames(.))) %>%
dplyr::mutate(
lengthcubed = avg.length^3
)
adult.meanlength.all <- mean( dat$avg.length[dat$age > 15] )
adult.meanlength.male <- mean( dat$avg.length[dat$age > 15 & dat$sex == "M"] )
adult.meanlength.female <- mean( dat$avg.length[dat$age > 15 & dat$sex == "F"] )
# from Leigh & Shea 1996 (Yerkes data)
par.init.all <- c(B = adult.meanlength.all,
D1 = 8.835 , D2 = 9.450, D3 = 28.465, C1 = 3.355, C2 = 12.990, C3 = 1.005)
# these are averages
par.init.female <- c(B = adult.meanlength.female,
D1 = 8.48 , D2 = 8.93, D3 = 44.81, C1 = 1.92, C2 = 6.95, C3 = 0.79)
par.init.male <- c(B = adult.meanlength.male,
D1 = 9.19 , D2 = 9.97, D3 = 12.12, C1 = 4.79, C2 = 19.03, C3 = 1.22)
reps <- 1e2
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
debug(optimize.jpps.iteratively_reweight)
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
oldcof
fit_jpps(x = ind.obs, y = dep.obs, par = oldcof)
mod.res
debug(optimize.jpps.iteratively_reweight)
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
mod.new$par
mod.new$par
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
mod.new$par
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
optimize.jpps.iteratively_reweight <- function(params,
optim.method = "SANN",
iter.method = "Nelder",
tol,
maxit,
ind.obs,
dep.obs){
# TODO test that / catches
# First fit init model
mod.new <- optim(par = params,
fn = function(x, y, par){
res <- fit_jpps(x, y, par)
ret <- sum((res)^2) # optimize by minimizing residual sums of squares
return(ret)
},
x = ind.obs,
y = dep.obs,
method = optim.method,
control = list(maxit = 10000, trace = F))
# perform iterative reweighting
for (i in 1:maxit){
# oldcof<-as.vector(mod.new$par)
# B<-oldcof[1]
# D1<-oldcof[2]
# D2<-oldcof[3]
# D3<-oldcof[4]
# C1<-oldcof[5]
# C2<-oldcof[6]
# C3<-oldcof[7]
# yhat<-B*(1 - 1/(1 + ((ind.obs/D1)^C1) + ((ind.obs/D2)^C2) + ((ind.obs/D3)^C3))) #JPPS eq.
# res <- dep.obs - yhat #residuals
# store old model coefficients
names(mod.new$par) <- c("B", "D1", "D2", "D3", "C1", "C2", "C3")
oldcof <- mod.new$par
# get model residuals
res <- fit_jpps(x = ind.obs, y = dep.obs, par = oldcof)
# fit linear model to residuals for weights
mod.res<-optim(par=c(.5,.5),
fn = fit_linear_regression,
a = ind.obs,
b = res,
control=list(abstol = tol),
method="Nelder") #this models any linear trend to the residuals; essentially the same as lm() function
gam0 <- mod.res$par[1]
gam1 <- mod.res$par[2]
w.new <- abs(1/(gam0 + gam1 * dep.obs)) # estimate new weights
#  mod.new<-optim(par=as.vector(mod.new$par),weight.func,x=dat$Age,y=dat$Avg.Size,w=w.new,control=list(abstol=tol),method="SANN") #run optimization again with new weights
#
mod.new <- optim(par= mod.new$par,
fn = function(par, x, y, w){
res <- fit_jpps(x, y, par)
ret <- sum(w*(res)^2) # now account for weights in sum of squares
return(ret)
},
x = ind.obs,
y = dep.obs,
w = w.new,
control=list(abstol=tol),
method = optim.method) #run optimization again with new weights
newcof <- as.vector(mod.new$par)
dif <- sum(sqrt((oldcof - newcof)^2))/length(newcof) #compare the difference; check tolerance with last pass of iterative weighting
dif <- sqrt((oldcof[1] - newcof[1])^2)
if(dif<=tol){break}
}
ret <- list(
params = mod.new$par, # save "converged" params
residuals = res # save residuals associated with "converged" params
)
return(ret)
}
debug(optimize.jpps.iteratively_reweight)
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
fit_jpps <- function(x, y, par) {
B = par["B"]
D1 = par["D1"]
D2 = par["D2"]
D3 = par["D3"]
C1 = par["C1"]
C2 = par["C2"]
C3 = par["C3"]
yhat<-B*(1 - 1/(1 +((x/D1)^C1)+((x/D2)^C2)+((x/D3)^C3))) #JPPS equation
res <- y-yhat #residuals
#  ret <- sum((res)^2) # optimize by minimizing residual sums of squares
return(res)
}
fit_linear_regression <-function(par, a, b){
b0 <- par[1]
b1 <- par[2]
bhat <- b0 + b1 * a # linear model
res <- b-bhat #residuals
ret <- sum(abs(res)^2) #residual sums of squares
return(ret)
}
optimize.jpps.ord <- function(par,
optim.method = "SANN",
ind.obs,
dep.obs){
mod.new <- optim(par = params,
fn = function(x, y, par){
res <- fit_jpps(x, y, par)
ret <- sum((res)^2) # optimize by minimizing residual sums of squares
return(ret)
},
x = ind.obs, y = dep.obs,
method = optim.method,
control = list(maxit = 10000, trace = F))
res <- fit_jpps(par = mod.new$par, x = ind.obs, y = dep.obs)
# return
ret <- list(
params = mod.new$par, # save "converged" params
residuals = res # save residuals associated with "converged" params
)
return(ret)
}
optimize.jpps.iteratively_reweight <- function(params,
optim.method = "SANN",
iter.method = "Nelder",
tol,
maxit,
ind.obs,
dep.obs){
# TODO test that / catches
# First fit init model
mod.new <- optim(par = params,
fn = function(x, y, par){
res <- fit_jpps(x, y, par)
ret <- sum((res)^2) # optimize by minimizing residual sums of squares
return(ret)
},
x = ind.obs,
y = dep.obs,
method = optim.method,
control = list(maxit = 10000, trace = F))
# perform iterative reweighting
for (i in 1:maxit){
# oldcof<-as.vector(mod.new$par)
# B<-oldcof[1]
# D1<-oldcof[2]
# D2<-oldcof[3]
# D3<-oldcof[4]
# C1<-oldcof[5]
# C2<-oldcof[6]
# C3<-oldcof[7]
# yhat<-B*(1 - 1/(1 + ((ind.obs/D1)^C1) + ((ind.obs/D2)^C2) + ((ind.obs/D3)^C3))) #JPPS eq.
# res <- dep.obs - yhat #residuals
# store old model coefficients
names(mod.new$par) <- c("B", "D1", "D2", "D3", "C1", "C2", "C3")
oldcof <- mod.new$par
# get model residuals
res <- fit_jpps(x = ind.obs, y = dep.obs, par = oldcof)
# fit linear model to residuals for weights
mod.res<-optim(par=c(.5,.5),
fn = fit_linear_regression,
a = ind.obs,
b = res,
control=list(abstol = tol),
method="Nelder") #this models any linear trend to the residuals; essentially the same as lm() function
gam0 <- mod.res$par[1]
gam1 <- mod.res$par[2]
w.new <- abs(1/(gam0 + gam1 * dep.obs)) # estimate new weights
#  mod.new<-optim(par=as.vector(mod.new$par),weight.func,x=dat$Age,y=dat$Avg.Size,w=w.new,control=list(abstol=tol),method="SANN") #run optimization again with new weights
#
mod.new <- optim(par= mod.new$par,
fn = function(par, x, y, w){
res <- fit_jpps(x, y, par)
ret <- sum(w*(res)^2) # now account for weights in sum of squares
return(ret)
},
x = ind.obs,
y = dep.obs,
w = w.new,
control=list(abstol=tol),
method = optim.method) #run optimization again with new weights
newcof <- as.vector(mod.new$par)
dif <- sum(sqrt((oldcof - newcof)^2))/length(newcof) #compare the difference; check tolerance with last pass of iterative weighting
dif <- sqrt((oldcof[1] - newcof[1])^2)
if(dif<=tol){break}
}
ret <- list(
params = mod.new$par, # save "converged" params
residuals = res # save residuals associated with "converged" params
)
return(ret)
}
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
# faster for loop
ret.irnls <- parallel::mclapply(1:reps, function(x){
optimize.jpps.iteratively_reweight(par = par.init.all,
optim.method = "SANN",
iter.method = "Nelder",
tol = 1e-9, # tolerance
maxit = 500, # number of iterative weight steps to perform
ind.obs = dat$age,
dep.obs = dat$avg.length)
})
ret.irnls
ret.irnls.params <- ret.irnls %>%
purrr::map(., "params")
ret.irnls.params <- do.call("rbind.data.frame", ret.irnls.params)
ret.irnls.params
# let's summarize and 2.5th, 50th, and 97.5 probabilities
ret.irnls.params.summ <- apply(ret.irnls.params, 2, quantile, probs = c(0.025, 0.5, 0.975))
ret.irnls.params.summ
ret.irnls.params
names(ret.irnls.params)
ret.irnls.params <- ret.irnls %>%
purrr::map(., "params")
ret.irnls.params <-  as.data.frame(do.call(rbind, ret.irnls.params))
names(ret.irnls.params)
# let's summarize and 2.5th, 50th, and 97.5 probabilities
ret.irnls.params.summ <- apply(ret.irnls.params, 2, quantile, probs = c(0.025, 0.5, 0.975))
knitr::kable(ret.irnls.params)
knitr::kable(ret.irnls.params.summ)
library(JPPSiterweight)
devtools::build_vignettes()
devtools::build_vignettes()
# Chunk 1: setup
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = F,
message = F
)
# Chunk 2
library(JPPSiterweight)
library(tidyverse)
library(cowplot)
# Chunk 3
# TODO usethis::use_data
#
dat <- readxl::read_excel(path = "~/Downloads/average body area and length_kanyawara 2012.xlsx", sheet = 1) %>%
magrittr::set_colnames(tolower(colnames(.))) %>%
dplyr::mutate(
lengthcubed = avg.length^3
)
# Chunk 4
adult.meanlength.all <- mean( dat$avg.length[dat$age > 15] )
adult.meanlength.male <- mean( dat$avg.length[dat$age > 15 & dat$sex == "M"] )
adult.meanlength.female <- mean( dat$avg.length[dat$age > 15 & dat$sex == "F"] )
# from Leigh & Shea 1996 (Yerkes data)
par.init.all <- c(B = adult.meanlength.all,
D1 = 8.835 , D2 = 9.450, D3 = 28.465, C1 = 3.355, C2 = 12.990, C3 = 1.005)
# these are averages
par.init.female <- c(B = adult.meanlength.female,
D1 = 8.48 , D2 = 8.93, D3 = 44.81, C1 = 1.92, C2 = 6.95, C3 = 0.79)
par.init.male <- c(B = adult.meanlength.male,
D1 = 9.19 , D2 = 9.97, D3 = 12.12, C1 = 4.79, C2 = 19.03, C3 = 1.22)
# Chunk 5
reps <- 1e2
# Chunk 6
# faster for loop
ret.ord <- parallel::mclapply(1:reps, FUN = function(x){
JPPSiterweight::optimize.jpps.ord(
ind.obs = dat$age,
dep.obs = dat$avg.length,
par = par.init.female)
})
# let's bind our replications together into a dataframe
ret.ord.params <- ret.ord %>%
purrr::map(., "params")
ret.ord.params <- as.data.frame(do.call(rbind, ret.ord.params))
# let's summarize and 2.5th, 50th, and 97.5 probabilities
ret.ord.params.summ <- apply(ret.ord.params, 2, quantile, probs = c(0.025, 0.5, 0.975))
knitr::kable(ret.ord.params.summ)
ret.ord.params.summ
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
warning = F,
message = F
)
# faster for loop
ret.ord <- parallel::mclapply(1:reps, FUN = function(x){
JPPSiterweight::optimize.jpps.ord(
ind.obs = dat$age,
dep.obs = dat$avg.length,
par = par.init.female)
})
# let's bind our replications together into a dataframe
ret.ord.params <- ret.ord %>%
purrr::map(., "params")
ret.ord.params <- as.data.frame(do.call(rbind, ret.ord.params))
# let's summarize and 2.5th, 50th, and 97.5 probabilities
ret.ord.params.summ <- apply(ret.ord.params, 2, quantile, probs = c(0.025, 0.5, 0.975))
knitr::kable(ret.ord.params.summ)
JPPSiterweight::optimize.jpps.ord(
ind.obs = dat$age,
dep.obs = dat$avg.length,
par = par.init.female)
optimize.jpps.ord
library(JPPSiterweight)
JPPSiterweight::optimize.jpps.ord(
ind.obs = dat$age,
dep.obs = dat$avg.length,
params = par.init.female)
devtools::build_vignettes()
library(JPPSiterweight)
devtools::build_vignettes()
library(JPPSiterweight)
library(tidyverse)
library(cowplot)
# TODO usethis::use_data
#
dat <- readxl::read_excel(path = "~/Downloads/average body area and length_kanyawara 2012.xlsx", sheet = 1) %>%
magrittr::set_colnames(tolower(colnames(.))) %>%
dplyr::mutate(
lengthcubed = avg.length^3
)
adult.meanlength.all <- mean( dat$avg.length[dat$age > 15] )
adult.meanlength.male <- mean( dat$avg.length[dat$age > 15 & dat$sex == "M"] )
adult.meanlength.female <- mean( dat$avg.length[dat$age > 15 & dat$sex == "F"] )
# from Leigh & Shea 1996 (Yerkes data)
par.init.all <- c(B = adult.meanlength.all,
D1 = 8.835 , D2 = 9.450, D3 = 28.465, C1 = 3.355, C2 = 12.990, C3 = 1.005)
# these are averages
par.init.female <- c(B = adult.meanlength.female,
D1 = 8.48 , D2 = 8.93, D3 = 44.81, C1 = 1.92, C2 = 6.95, C3 = 0.79)
par.init.male <- c(B = adult.meanlength.male,
D1 = 9.19 , D2 = 9.97, D3 = 12.12, C1 = 4.79, C2 = 19.03, C3 = 1.22)
reps <- 1e2
# faster for loop
ret.ord <- parallel::mclapply(1:reps, FUN = function(x){
JPPSiterweight::optimize.jpps.ord(
ind.obs = dat$age,
dep.obs = dat$avg.length,
params = par.init.all)
})
# let's bind our replications together into a dataframe
ret.ord.params <- ret.ord %>%
purrr::map(., "params")
ret.ord.params <- as.data.frame(do.call(rbind, ret.ord.params))
# let's summarize and 2.5th, 50th, and 97.5 probabilities
ret.ord.params.summ <- apply(ret.ord.params, 2, quantile, probs = c(0.025, 0.5, 0.975))
knitr::kable(ret.ord.params.summ)
makeJPPS.firstorder_obj(ret.ord.params.summ[2,])
predict(makeJPPS.firstorder_obj(ret.ord.params.summ[2,]), x = seq(0.01, 50, by = 0.01))
predict
predict.jpps_firstorder <- function(params, x){
ret <- params["B"] *
(
1- 1/( 1 + (x/params["D1"])^params["C1"] +
(x/params["D2"])^params["C2"] +
(x/params["D3"])^params["D3"] )
)
ret <- data.frame(age = x, outcome = ret)
return(ret)
}
predict(makeJPPS.firstorder_obj(ret.ord.params.summ[2,]), x = seq(0.01, 50, by = 0.01))
library(JPPSiterweight)
library(tidyverse)
library(cowplot)
JPPSiterweight
# TODO usethis::use_data
#
dat <- readxl::read_excel(path = "~/Downloads/average body area and length_kanyawara 2012.xlsx", sheet = 1) %>%
magrittr::set_colnames(tolower(colnames(.))) %>%
dplyr::mutate(
lengthcubed = avg.length^3
)
```{r}
adult.meanlength.all <- mean( dat$avg.length[dat$age > 15] )
adult.meanlength.male <- mean( dat$avg.length[dat$age > 15 & dat$sex == "M"] )
adult.meanlength.female <- mean( dat$avg.length[dat$age > 15 & dat$sex == "F"] )
# from Leigh & Shea 1996 (Yerkes data)
par.init.all <- c(B = adult.meanlength.all,
D1 = 8.835 , D2 = 9.450, D3 = 28.465, C1 = 3.355, C2 = 12.990, C3 = 1.005)
par.init.female <- c(B = adult.meanlength.female,
D1 = 8.48 , D2 = 8.93, D3 = 44.81, C1 = 1.92, C2 = 6.95, C3 = 0.79)
par.init.male <- c(B = adult.meanlength.male,
D1 = 9.19 , D2 = 9.97, D3 = 12.12, C1 = 4.79, C2 = 19.03, C3 = 1.22)
reps <- 1
# faster for loop
ret.ord <- parallel::mclapply(1:reps, FUN = function(x){
JPPSiterweight::optimize.jpps.ord(
ind.obs = dat$age,
dep.obs = dat$avg.length,
params = par.init.all)
})
# let's bind our replications together into a dataframe
ret.ord.params <- ret.ord %>%
purrr::map(., "params")
ret.ord.params <- as.data.frame(do.call(rbind, ret.ord.params))
# let's summarize and 2.5th, 50th, and 97.5 probabilities
ret.ord.params.summ <- apply(ret.ord.params, 2, quantile, probs = c(0.025, 0.5, 0.975))
knitr::kable(ret.ord.params.summ)
predict(makeJPPS.firstorder_obj(ret.ord.params.summ[2,]), x = seq(0.01, 50, by = 0.01))
library(JPPSiterweight)
predict(makeJPPS.firstorder_obj(ret.ord.params.summ[2,]), x = seq(0.01, 50, by = 0.01))
# let's get predictions from our model
predictions_grwth <- predict.jpps_firstorder(makeJPPS.firstorder_obj(ret.ord.params.summ[2,]), x = seq(0.01, 50, by = 0.01)) # make fine scale for geom_line so it does not have disjointed connections
library(JPPSiterweight)
JPPSiterweight::pred
predict(makeJPPS.firstorder_obj(ret.ord.params.summ[2,]), x = seq(0.01, 50, by = 0.01))
devtools::build_vignettes()
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
?build_site
devtools::build_site()
devtools::build_site()
devtools::build_site()
devtools::build_site(".")
usethis::create_package("~/Documents/GitHub/JPPSnls/")
devtools::sitea
devtools::build_site(".")
?build_site
pkgdown::init_site()
?`initialize,signature-method`
?init_site
usethis::use_pkgdown()
pkgdown::init_site()
pkgdown::init_site(".")
pkgdown::init_site(".")
pkgdown::init_site()
usethis::use_mit_license()
usethis::use_mit_license("Nicholas Brazeau")
